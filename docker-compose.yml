version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: price-list-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  minio:
    image: minio/minio:latest
    container_name: price-list-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Optional: MinIO Client for bucket creation
  minio-setup:
    image: minio/mc:latest
    container_name: price-list-minio-setup
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin; do echo 'Waiting for MinIO...' && sleep 1; done;
      /usr/bin/mc mb minio/price-lists --ignore-existing;
      /usr/bin/mc policy set public minio/price-lists;
      echo 'MinIO setup completed';
      "
    restart: "no"

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: price-list-redis-commander
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: "local:redis:6379"
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - tools

volumes:
  redis-data:
    driver: local
  minio-data:
    driver: local

networks:
  default:
    name: price-list-network
