# This workflow will build and test a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Build and Test

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start test infrastructure (Redis + MinIO)
      run: |
        echo "Starting Redis and MinIO services..."
        # Use docker compose (newer syntax) instead of docker-compose
        docker compose -f ./docker-compose.tests.yml up -d
        
        echo "Waiting for services to be ready..."
        # Wait for Redis
        timeout 30 bash -c 'until docker exec $(docker compose -f ./docker-compose.tests.yml ps -q redis) redis-cli ping; do sleep 2; done'
        
        # Wait for MinIO
        timeout 30 bash -c 'until curl -f http://localhost:9000/minio/health/live; do sleep 2; done'
        
        echo "Services are ready!"

    - name: Run unit and integration tests (26 tests)
      run: |
        echo "Running unit and integration tests..."
        dotnet test --no-build --configuration Release --verbosity normal \
          --filter "FullyQualifiedName!~EndToEndEmailProcessingTests" \
          --logger "console;verbosity=normal"

    - name: Run E2E test separately
      run: |
        echo "Running E2E test..."
        dotnet test --no-build --configuration Release --verbosity normal \
          --filter "FullyQualifiedName~EndToEndEmailProcessingTests" \
          --logger "console;verbosity=normal"

    - name: Stop test infrastructure
      run: |
        echo "Stopping test infrastructure..."
        docker compose -f ./docker-compose.tests.yml down

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/TestResults/
          **/logs/
        retention-days: 7

  build-and-publish:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Release
      run: dotnet build --no-restore --configuration Release

    - name: Publish
      run: dotnet publish --no-build --configuration Release --output ./publish

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: price-list-processor
        path: ./publish/
        retention-days: 30
